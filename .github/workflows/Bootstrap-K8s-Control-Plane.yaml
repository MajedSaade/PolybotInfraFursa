name: Bootstrap K8s Control Plane

on:
  workflow_dispatch:

jobs:
  setup-control-plane:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Read control plane IP from AWS SSM
        id: read_ip
        run: |
          CONTROL_PLANE_IP=$(aws ssm get-parameter \
            --name "/k8s/control-plane-ip" \
            --query "Parameter.Value" \
            --output text)
          echo "‚úÖ IP from SSM: $CONTROL_PLANE_IP"
          echo "CONTROL_PLANE_IP=$CONTROL_PLANE_IP" >> $GITHUB_ENV

      - name: Export Discord Bot Tokens to Environment
        run: |
          echo "DISCORD_BOT_TOKEN_DEV=${{ secrets.DISCORD_BOT_TOKEN_DEV }}" >> $GITHUB_ENV
          echo "DISCORD_BOT_TOKEN_PROD=${{ secrets.DISCORD_BOT_TOKEN_PROD }}" >> $GITHUB_ENV

      - name: Bootstrap ArgoCD and Sync Apps on Control Plane
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.CONTROL_PLANE_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DISCORD_BOT_TOKEN_DEV,DISCORD_BOT_TOKEN_PROD
          script: |
            set -e

            echo "üîß Updating system..."
            sudo apt-get update -y
            sudo apt-get install -y git curl

            echo "üì° Cloning repo..."
            rm -rf ~/PolybotInfraFursa
            git clone https://github.com/MajedSaade/PolybotInfraFursa.git ~/PolybotInfraFursa

            echo "üöÄ Installing ArgoCD..."
            kubectl create namespace argocd || true
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            
            kubectl apply -f ~/PolybotInfraFursa/k8s/argo-apps/apps-of-apps.yaml -n argocd
            sleep 30
            

            echo "‚è≥ Waiting for ArgoCD to be ready..."
            kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd

            echo "üîê ArgoCD admin password:"
            kubectl -n argocd get secret argocd-initial-admin-secret \
              -o jsonpath="{.data.password}" | base64 -d && echo

            echo "üì¶ Creating discord-token secrets in dev and prod..."
            kubectl create namespace dev || true
            kubectl create namespace prod || true
            kubectl create namespace monitoring || true
            kubectl create namespace ingress-nginx || true

            echo "üîç Token length (dev): ${#DISCORD_BOT_TOKEN_DEV}"
            echo "üîç Token length (prod): ${#DISCORD_BOT_TOKEN_PROD}"

            kubectl create secret generic discord-token \
              --from-literal=DISCORD_BOT_TOKEN="${DISCORD_BOT_TOKEN_DEV}" \
              -n dev --dry-run=client -o yaml | kubectl apply -f -

            kubectl create secret generic discord-token \
              --from-literal=DISCORD_BOT_TOKEN="${DISCORD_BOT_TOKEN_PROD}" \
              -n prod --dry-run=client -o yaml | kubectl apply -f -

            echo "‚è≥ Sleeping 15 seconds to allow ArgoCD services to stabilize..."
            sleep 15

            echo "‚è≥ Waiting for ingress-nginx LoadBalancer to be ready..."
            for i in {1..10}; do
              INGRESS_HOST=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
              if [[ -n "$INGRESS_HOST" ]]; then
                echo "‚úÖ Found LoadBalancer hostname: $INGRESS_HOST"
                break
              fi
              echo "‚åõ Still waiting... ($i)"
              sleep 15
            done

            if [[ -z "$INGRESS_HOST" ]]; then
              echo "‚ùå Failed to get Ingress hostname"
              exit 1
            fi

            ZONE_ID=$(aws route53 list-hosted-zones-by-name --dns-name "fursa.click" --output json \
              | jq -r '.HostedZones[0].Id' | sed 's|/hostedzone/||')

            echo "‚úÖ Route53 Zone ID: $ZONE_ID"

            aws route53 change-resource-record-sets --hosted-zone-id "$ZONE_ID" --change-batch "{
              \"Comment\": \"Update ingress record\",
              \"Changes\": [{
                \"Action\": \"UPSERT\",
                \"ResourceRecordSet\": {
                  \"Name\": \"majed-k8s.fursa.click.\",
                  \"Type\": \"A\",
                  \"AliasTarget\": {
                    \"HostedZoneId\": \"Z32O12XQLNTSW2\",
                    \"DNSName\": \"$INGRESS_HOST\",
                    \"EvaluateTargetHealth\": false
                  }
                }]
            }
